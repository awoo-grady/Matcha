#!/bin/bash -l
#
# .prefix
#
# Matcha 1.0, Created by gradyzhuo, enoch_lee.
# Copyright © 2017, Matcha Inc. All rights reserved.
#

declare -x MATCHA_VERSION='1.0'
declare -x INSTALL_LIB_TARGET="$HOME/.matcha"

declare -x MATCHA_BUILDER_BASE
declare -x COMMAND_BASE
declare -x COMMAND
declare -x MODULES_FOLDER

declare -i -x DEBUG_MODE=1
declare -i -x BUILD_CI=1

declare -f @exec
declare -f function_exists
declare -f command_exists
declare -f exists
declare -f terminate
declare -f welcome
declare -f shell_session_update
declare -f @log

function welcome(){
  if [[ $BUILD_CI != 0 ]]; then
    echo -e '\033[32m'
  else
    echo ""
  fi
  echo '＃＃＃＃＃＃＃＃＃＃＃＃＃＃＃＃＃＃＃＃＃＃＃＃＃＃＃＃＃＃'
  echo '＃　　　　　　　　　　　　　　　　　　　　　　　　　　　　＃'
  echo '＃　　　　　　　～～　Ｗｅｌｃｏｍｅ　～～　　　　　　　　＃'
  echo '＃　　　　　　Ｍａｔｃｈａ　Ｓｃｒｉｐｔｉｎｇ　　　　　　＃'
  echo '＃　　　　　　　Ｖｅｒｓｉｏｎ　　１．０　　　　　　　　　＃'
  echo '＃　　　　　　　　　　　　　　　　　　　　　　　　　　　　＃'
  echo '＃＃＃＃＃＃＃＃＃＃＃＃＃＃＃＃＃＃＃＃＃＃＃＃＃＃＃＃＃＃'
  if [[ $BUILD_CI != 0 ]]; then
    echo -e '\033[m'
  else
    echo ""
  fi
}

function @exec() {


  # if [[ "$0" == "-bash" ]]; then
  #   print -c "red" -s "bold" "@exec not support when running matcha by \`source\` in terminal. please run \`\$ matcha $1\` insteaded."
  #   return 0
  # fi

  COMMAND="$1"

  if [[ $(ls "$MATCHA_BUILDER_BASE/exec") != *"$COMMAND"*  ]]; then
    print -c 'red' -s 'bold' "Command \`$1\` not found."
    return 0
  fi

  if [[ -z $COMMAND ]]; then
    print -c "red" -s bold "-- Command name can't be empty! ----------"
    return 0
  fi

  PREVIOUS_COMMAND_BASE="$COMMAND_BASE"
  COMMAND_BASE="$MATCHA_BUILDER_BASE/exec/$COMMAND"
  if [[ -e "$COMMAND_BASE/main" ]]; then
    pushd "$COMMAND_BASE" >/dev/null 2>&1
    source main "$@"
    popd >/dev/null 2>&1
  fi

  COMMAND_BASE="$PREVIOUS_COMMAND_BASE"
}

function function_exists() {
    declare -f -F $1 > /dev/null
    echo "$?"
}

function command_exists() {
    command -v $1 > /dev/null
    echo "$?"
}

# -f : function
# -c : command
function exists() {
	_type="$1"
	_command="$2"

    if [[ "$_type" == "-f" ]]; then
    	function_exists $_command
    fi

    if [[ "$_type" == "-c" ]]; then
    	command_exists $_command
    fi
}

function terminate(){

  declare error_code="$1"
  declare error_message="$2"

  if [[ "$error_message" != "" ]]; then
    print -c "red" -s bold "-- $error_message ----------"
  fi

  exit 1
}

function shell_session_update() {
  if [[ $? != 0 ]]; then
    did_terminate
    print -c "red" -s bold "Builder is terminated!"
  fi
}

function @log() {
  title="$1"
  DATETIME="$(date +"%y-%m-%d %H:%M:%S")"
  print -c cyan -s bold "[$DATETIME] $title"
}

function @error() {
  title="$1"
  DATETIME="$(date +"%y-%m-%d %H:%M:%S")"
  print -c cyan -s bold "[$DATETIME] $title" 1>&2
}
